/*
========================================================================================
    KAUST HPC SLURM Cluster Configuration for Sheep Pangenome Pipeline
    Optimized for Ibex cluster with KAUST-specific settings
========================================================================================
*/

process {
    executor = 'slurm'
    queue = 'batch'  // Ibex default partition

    // Default SLURM options - KAUST Ibex specific
    clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'

    // Stage 1 specific configurations - KAUST optimized
    withName: 'DOWNLOAD_GENOME' {
        queue = 'batch'  // Ibex default partition
        cpus = 2
        memory = { 4.GB * task.attempt }
        time = { params.max_download_time }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'

        // Special handling for large genomes or slow networks
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        maxRetries = params.download_retries
    }

    withName: 'VALIDATE_GENOME' {
        queue = 'batch'  // Ibex default partition
        cpus = 1
        memory = { 2.GB * task.attempt }  // Ibex default: 2GB per CPU
        time = { 1.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'

        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        maxRetries = 2
    }

    // Future stages (to be implemented)

    // Stage 2: Preprocessing - KAUST optimized
    withName: 'STANDARDIZE_GENOME' {
        queue = 'batch'
        cpus = 2
        memory = { 4.GB * task.attempt }
        time = { 2.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    withName: 'CREATE_GENOME_INDEX' {
        queue = 'batch'
        cpus = 4
        memory = { 8.GB * task.attempt }
        time = { 4.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    // Stage 3: PGGB Pangenome Construction (High-resource) - Ibex optimized
    withName: 'PGGB' {
        queue = 'batch'
        cpus = 32
        memory = { 150.GB * task.attempt }
        time = { 48.h * task.attempt }

        // Ibex specific cluster options with Intel node preference
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"} --constraint=intel'

        // Special PGGB handling - retry with more memory if needed
        errorStrategy = 'retry'
        maxRetries = 1

        // Scale up resources on retry (within Ibex limits)
        memory = { task.attempt == 1 ? 150.GB : Math.min(300.GB, 370.GB) }  // Ibex node memory limit
        time = { task.attempt == 1 ? 48.h : Math.min(72.h, 336.h) }  // Max 14 days on Ibex
    }

    // Stage 4: Graph Analysis - KAUST optimized
    withName: 'ODGI_STATS' {
        queue = 'batch'
        cpus = 8
        memory = { 32.GB * task.attempt }
        time = { 12.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    withName: 'ODGI_VIZ' {
        queue = 'batch'
        cpus = 4
        memory = { 16.GB * task.attempt }
        time = { 6.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    // Stage 5: Variant Calling - KAUST optimized
    withName: 'VG_CALL' {
        queue = 'batch'
        cpus = 8
        memory = { 64.GB * task.attempt }
        time = { 24.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    withName: 'VG_FILTER' {
        queue = 'batch'
        cpus = 4
        memory = { 16.GB * task.attempt }
        time = { 8.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    // Stage 6: Population Analysis - KAUST optimized
    withName: 'ADMIXTURE' {
        queue = 'batch'
        cpus = 8
        memory = { 32.GB * task.attempt }
        time = { 24.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    withName: 'IQTREE' {
        queue = 'batch'
        cpus = 16
        memory = { 64.GB * task.attempt }
        time = { 48.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    // Stage 7: Publication - KAUST optimized
    withName: 'GENERATE_FIGURES' {
        queue = 'batch'
        cpus = 4
        memory = { 8.GB * task.attempt }
        time = { 4.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }

    withName: 'GENERATE_MANUSCRIPT' {
        queue = 'batch'
        cpus = 2
        memory = { 4.GB * task.attempt }
        time = { 2.h * task.attempt }
        clusterOptions = '--account=${SLURM_ACCOUNT ?: "k01"}'
    }
}

// KAUST Ibex cluster-specific settings
params {
    // Ibex resource limits (based on cluster documentation)
    max_memory = '370.GB'  // Ibex compute node memory limit
    max_cpus = 32          // Reasonable CPU limit for single jobs
    max_time = '336.h'     // 14 days maximum on Ibex

    // Account and project settings
    // Set via environment: export SLURM_ACCOUNT="your_account"
    default_account = "k01"  // Default KAUST account prefix
}

// Ibex filesystem paths
workDir = "/ibex/user/\$USER/nextflow-work"

// Enable job array optimization for parallel downloads (Ibex limits)
executor {
    \$slurm {
        // Ibex-specific job array settings
        queueSize = 50          // Concurrent jobs limit
        submitRateLimit = '10/1min'  // Conservative rate limiting
        pollInterval = '30s'         // Status check interval

        // Ibex user limits
        maxSubmit = 2000        // Ibex: 2000 jobs/user limit
    }
}

// Ibex-specific resource scaling
params {
    // Stage 1 scaling factors
    stage1_scale_factor = 1.0

    // Stage 3 (PGGB) scaling based on genome count and Ibex limits
    pggb_memory_per_genome = 2.5    // GB per genome
    pggb_cpu_scaling = true         // Scale CPUs with genome count
    pggb_max_memory_ibex = 370      // Ibex node memory limit (GB)

    // Stage 6 population analysis scaling
    pop_analysis_scale_genomes = 10  // Scale resources every N genomes

    // Ibex user resource limits (conservative approach)
    ibex_max_running_cpus = 1300    // Ibex limit: 1300 cores
    ibex_max_memory_total = 16000   // Ibex limit: 16TB total memory
    ibex_max_time_limit = 336       // Ibex: 14 days maximum

    // Emergency resource limits (Ibex compliant)
    emergency_memory_limit = '300.GB'
    emergency_time_limit = '336.h'  // 14 days max on Ibex
    emergency_cpu_limit = 32
}