/*
========================================================================================
    Stage 3 Module Configuration: Pangenome Graph Construction
========================================================================================
    Module-specific configurations for PGGB graph construction, validation, and analysis
========================================================================================
*/

process {

    withName: PGGB_CONSTRUCT {
        container = 'pangenome/pggb:latest'

        // Resource allocation optimized for sheep pangenome
        cpus          = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 128.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 12.h   * task.attempt, 'time'    ) }

        // Error handling and retry strategy
        errorStrategy = 'retry'
        maxRetries    = 2

        // Module-specific parameters
        ext.args = [
            '--threads ${task.cpus}',
            '--poa-length-target 700,900,1100',
            '--align-poa',
            '--no-splits',
            '--multiqc'
        ].join(' ')

        ext.prefix = { "${params.outdir}/03_graph_construction/sheep_pangenome" }

        publishDir = [
            [
                path: "${params.outdir}/03_graph_construction/main_outputs",
                mode: params.publish_dir_mode,
                pattern: "*.{gfa,og,png}"
            ],
            [
                path: "${params.outdir}/03_graph_construction/pggb_outputs",
                mode: params.publish_dir_mode,
                pattern: "pggb_output/*"
            ],
            [
                path: "${params.outdir}/03_graph_construction/logs",
                mode: params.publish_dir_mode,
                pattern: "*.{log,txt}"
            ]
        ]
    }

    withName: GRAPH_VALIDATE {
        container = 'pangenome/odgi:latest'

        // Moderate resources for validation
        cpus          = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 2.h   * task.attempt, 'time'    ) }

        errorStrategy = 'retry'
        maxRetries    = 1

        publishDir = [
            [
                path: "${params.outdir}/03_graph_construction/validation",
                mode: params.publish_dir_mode,
                pattern: "*_validation_report.html"
            ],
            [
                path: "${params.outdir}/03_graph_construction/validation",
                mode: params.publish_dir_mode,
                pattern: "*_validation.{json,log}"
            ]
        ]
    }

    withName: GRAPH_STATS {
        container = 'pangenome/odgi:latest'

        // Moderate resources for statistics
        cpus          = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }

        errorStrategy = 'retry'
        maxRetries    = 1

        publishDir = [
            [
                path: "${params.outdir}/03_graph_construction/statistics",
                mode: params.publish_dir_mode,
                pattern: "*_graph_report.html"
            ],
            [
                path: "${params.outdir}/03_graph_construction/statistics",
                mode: params.publish_dir_mode,
                pattern: "*_graph_stats.json"
            ],
            [
                path: "${params.outdir}/03_graph_construction/statistics/detailed",
                mode: params.publish_dir_mode,
                pattern: "*.tsv"
            ]
        ]
    }
}

// Stage 3 specific resource profiles
profiles {

    stage3_large {
        process {
            withName: PGGB_CONSTRUCT {
                cpus   = 32
                memory = 256.GB
                time   = 24.h
            }
        }
    }

    stage3_fast {
        params {
            pggb_segment_length = 10000      // Larger segments for speed
            pggb_block_length = 5000         // Larger blocks for speed
            graph_validation_enabled = false // Skip validation for speed
        }
    }

    stage3_highres {
        params {
            pggb_segment_length = 2000       // Smaller segments for resolution
            pggb_block_length = 1000         // Smaller blocks for resolution
            odgi_viz_width = 3840            // 4K visualization
        }
    }
}