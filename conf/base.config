/*
========================================================================================
    Base process configuration
========================================================================================
*/


process {
    // Default process settings
    cpus   = { 1 * task.attempt }
    memory = { 2.GB * task.attempt }
    time   = { 1.h * task.attempt }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'

    // Process-specific resource requirements by label
    withLabel:process_single {
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 1.h * task.attempt }
    }
    withLabel:process_low {
        cpus   = { 2 * task.attempt }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 4 * task.attempt }
        memory = { 8.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel:process_high {
        cpus   = { 8 * task.attempt }
        memory = { 16.GB * task.attempt }
        time   = { 8.h * task.attempt }
    }
    withLabel:process_long {
        time   = { 24.h * task.attempt }
    }
    withLabel:process_high_memory {
        memory = { 32.GB * task.attempt }
    }

    // Error handling labels
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
}

// Function to ensure that resource requirements don't go beyond maximum limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}