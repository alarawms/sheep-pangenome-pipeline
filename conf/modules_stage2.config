/*
========================================================================================
    Stage 2 Module Configuration - Genome Preprocessing & Indexing
========================================================================================
*/

process {

    // ================================================================================
    // Stage 2: Genome Standardization
    // ================================================================================

    withName: 'RENAME_CHROMOSOMES' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/chromosome_mapping" },
                mode: params.publish_dir_mode,
                pattern: "*_chromosome_mapping.tsv"
            ]
        ]
        cpus   = { 2 }
        memory = { 8.GB * task.attempt }
        time   = { 4.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        // Container with BioPython for sequence processing
        container = 'quay.io/biocontainers/biopython:1.79'
    }

    withName: 'NORMALIZE_HEADERS' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/standardized" },
                mode: params.publish_dir_mode,
                pattern: "*_standardized.fa"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/header_mapping" },
                mode: params.publish_dir_mode,
                pattern: "*_header_mapping.tsv"
            ]
        ]
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        container = 'quay.io/biocontainers/biopython:1.79'
    }

    // ================================================================================
    // Stage 2: Quality Control
    // ================================================================================

    withName: 'GENOME_STATS_EXTENDED' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_extended_stats.json"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_extended_stats.txt"
            ]
        ]
        cpus   = { 4 }
        memory = { 16.GB * task.attempt }
        time   = { 8.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        container = 'quay.io/biocontainers/seqkit:2.3.1--h9ee0642_0'
    }

    withName: 'BUSCO_ASSESSMENT' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/busco" },
                mode: params.publish_dir_mode,
                pattern: "*_busco_summary.json"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/busco" },
                mode: params.publish_dir_mode,
                pattern: "*_busco_full_table.tsv"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/busco" },
                mode: params.publish_dir_mode,
                pattern: "*_busco_short_summary.txt"
            ]
        ]
        cpus   = { params.busco_threads ?: 16 }
        memory = { 32.GB * task.attempt }
        time   = { 24.h * task.attempt }
        maxRetries = 1
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        // High-memory for BUSCO analysis
        container = 'ezlabgva/busco:v5.4.7_cv1'
        // SLURM specific - prefer longer queues for BUSCO
        clusterOptions = { task.attempt == 1 ? '--partition=batch' : '--partition=batch' }
    }

    withName: 'GENERATE_QC_REPORT' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/qc_reports" },
                mode: params.publish_dir_mode,
                pattern: "*_qc_report.html"
            ]
        ]
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 1.h * task.attempt }
        maxRetries = 2
        errorStrategy = 'retry'
        container = 'python:3.9-slim'
    }

    // ================================================================================
    // Stage 2: Index Generation
    // ================================================================================

    withName: 'CREATE_BWA_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/indices/bwa" },
                mode: params.publish_dir_mode,
                pattern: "*_bwa_index"
            ]
        ]
        cpus   = { params.bwa_index_threads ?: 8 }
        memory = { 32.GB * task.attempt }
        time   = { 12.h * task.attempt }
        maxRetries = 1
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        container = 'quay.io/biocontainers/bwa-mem2:2.2.1--he513fc3_0'
        // BWA indexing can be memory intensive for large genomes
        clusterOptions = { task.attempt == 1 ? '--partition=batch' : '--partition=batch --mem=64G' }
    }

    withName: 'CREATE_MINIMAP2_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/indices/minimap2" },
                mode: params.publish_dir_mode,
                pattern: "*_minimap2_index"
            ]
        ]
        cpus   = { params.minimap2_index_threads ?: 8 }
        memory = { 24.GB * task.attempt }
        time   = { 8.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        container = 'quay.io/biocontainers/minimap2:2.30--h577a1d6_0'
    }

    withName: 'CREATE_SAMTOOLS_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/indices/samtools" },
                mode: params.publish_dir_mode,
                pattern: "*_samtools_index"
            ]
        ]
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
        maxRetries = 2
        errorStrategy = 'retry'
        container = 'quay.io/biocontainers/samtools:1.17--h00cdaf9_0'
    }

    // ================================================================================
    // Stage 2: Reference Selection
    // ================================================================================

    withName: 'SELECT_REFERENCE' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/reference_selection" },
                mode: params.publish_dir_mode,
                pattern: "selected_reference.fa"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/reference_selection" },
                mode: params.publish_dir_mode,
                pattern: "reference_metadata.json"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/reference_selection" },
                mode: params.publish_dir_mode,
                pattern: "reference_selection_report.json"
            ]
        ]
        cpus   = { 2 }
        memory = { 8.GB * task.attempt }
        time   = { 2.h * task.attempt }
        maxRetries = 2
        errorStrategy = 'retry'
        container = 'python:3.9-slim'
    }

    // ================================================================================
    // Stage 2 Resource Scaling
    // ================================================================================

    // Adjust resources based on genome count
    withName: 'GENOME_PREPROCESSING.*' {
        // Scale memory and time based on number of genomes
        memory = {
            def base_mem = 8.GB
            def genome_count = params.genome_count ?: 10
            def scaling_factor = Math.min(4.0, Math.max(1.0, genome_count / 10))
            return base_mem * scaling_factor * task.attempt
        }
        time = {
            def base_time = 4.h
            def genome_count = params.genome_count ?: 10
            def scaling_factor = Math.min(3.0, Math.max(1.0, genome_count / 15))
            return base_time * scaling_factor * task.attempt
        }
    }
}

// Stage 2 specific parameters
params {
    // Quality control parameters
    busco_lineage               = 'mammalia_odb10'
    busco_threads               = 16
    busco_timeout               = '24.h'

    // Indexing parameters
    bwa_index_threads           = 8
    minimap2_index_threads      = 8
    create_all_indices          = true

    // Standardization parameters
    sheep_chromosome_count      = 27
    force_chromosome_renaming   = true
    header_normalization        = true

    // Reference selection parameters
    reference_selection_criteria = [
        'assembly_quality': 25,
        'completeness': 25,
        'sequence_quality': 20,
        'annotation_metadata': 15,
        'reference_suitability': 15
    ]

    // Stage 2 resource limits
    stage2_max_memory          = params.max_memory
    stage2_max_cpus            = params.max_cpus
    stage2_max_time            = '72.h'

    // Quality tier thresholds
    tier_a_plus_threshold      = 95    // BUSCO completeness %
    tier_a_threshold           = 90    // BUSCO completeness %
    tier_b_threshold           = 80    // BUSCO completeness %
    tier_c_threshold           = 70    // BUSCO completeness %

    // Expected sheep genome parameters
    expected_genome_size       = 2.8e9
    expected_chromosome_count  = 27
    expected_gc_content        = [38.0, 45.0]  // Min, Max %

    // Processing optimization
    parallel_indexing          = true
    skip_busco_if_low_quality  = false
    generate_html_reports      = true
}