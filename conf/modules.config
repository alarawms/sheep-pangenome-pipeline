/*
 * Module-specific configuration options
 */

process {
    // Global process configuration
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'DOWNLOAD_GENOME' {
        ext.args = '--include genome --no-progressbar'
        publishDir = [
            [
                path: { "${params.outdir}/01_data_preparation/downloaded_genomes" },
                mode: params.publish_dir_mode,
                pattern: "*.fa"
            ],
            [
                path: { "${params.outdir}/01_data_preparation/metadata" },
                mode: params.publish_dir_mode,
                pattern: "*.json"
            ],
            [
                path: { "${params.outdir}/01_data_preparation/logs" },
                mode: params.publish_dir_mode,
                pattern: "download_log.txt"
            ]
        ]
        // Resource requirements
        cpus   = { 2 }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
        // Error handling
        maxRetries = 3
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        // Rate limiting to avoid NCBI 429 errors
        maxForks = params.download_max_forks
    }

    withName: 'VALIDATE_GENOME' {
        publishDir = [
            [
                path: { "${params.outdir}/01_data_preparation/validation" },
                mode: params.publish_dir_mode,
                pattern: "*_validation.json"
            ],
            [
                path: { "${params.outdir}/01_data_preparation/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_stats.txt"
            ]
        ]
        // Resource requirements
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 1.h * task.attempt }
        // Error handling
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    // Stage 2: Preprocessing modules
    withName: 'STANDARDIZE_GENOME' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/standardized_genomes" },
                mode: params.publish_dir_mode,
                pattern: "*_standardized.fa"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/chromosome_mapping" },
                mode: params.publish_dir_mode,
                pattern: "*_mapping.tsv"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "*_standardization_log.txt"
            ]
        ]
        cpus   = { 2 }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'GENOME_QC_EXTENDED' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/quality_control" },
                mode: params.publish_dir_mode,
                pattern: "*_report.html"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/quality_control" },
                mode: params.publish_dir_mode,
                pattern: "*_stats.json"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "*_qc_log.txt"
            ]
        ]
        cpus   = { 2 }
        memory = { 8.GB * task.attempt }
        time   = { 3.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'BWA_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/bwa_mem2_index" },
                mode: params.publish_dir_mode,
                pattern: "*.{0123,amb,ann,bwt.2bit.64,pac}"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "bwa_mem2_index_log.txt"
            ]
        ]
        // BWA-MEM2 optimized for 3GB sheep genomes with multi-threading
        cpus   = { Math.min( 16 * task.attempt, params.max_cpus as int ) }
        memory = { task.attempt < 2 ? 64.GB : params.max_memory }
        time   = { 2.h * task.attempt }  // BWA-MEM2 is faster than classic BWA
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        // SLURM optimization for multi-threaded BWA-MEM2
        clusterOptions = { '--partition=batch --mem=64G --cpus-per-task=16' }
        // Control parallel execution to avoid resource contention
        maxForks = params.indexing_max_forks
    }

    withName: 'MINIMAP2_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/minimap2_index" },
                mode: params.publish_dir_mode,
                pattern: "*.mmi"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "minimap2_index_log.txt"
            ]
        ]
        // Heavily optimized for 3GB genomes - Minimap2 scales well with threads
        cpus   = { Math.min( 24 * task.attempt, params.max_cpus as int ) }
        memory = { task.attempt < 2 ? 96.GB : params.max_memory }
        time   = { 1.5.h * task.attempt }
        maxRetries = 1
        errorStrategy = 'ignore'  // Temporarily ignore Minimap2 indexing failures
        // SLURM optimization - minimap2 indexing is CPU and memory intensive
        clusterOptions = { '--partition=batch --mem=96G' }
        // Control parallel execution to avoid resource contention
        maxForks = params.indexing_max_forks
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/samtools_index" },
                mode: params.publish_dir_mode,
                pattern: "*.fai"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "samtools_index_log.txt"
            ]
        ]
        // Samtools faidx is single-threaded but fast for FASTA indexing
        cpus   = { 1 }
        memory = { 8.GB * task.attempt }
        time   = { 30.m * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'SELECT_REFERENCE_MANUAL' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/reference_selection" },
                mode: params.publish_dir_mode,
                pattern: "selected_reference.fa",
                enabled: params.enable_reference_selection
            ],
            [
                path: { "${params.outdir}/02_preprocessing/reference_selection" },
                mode: params.publish_dir_mode,
                pattern: "reference_metadata.json",
                enabled: params.enable_reference_selection
            ],
            [
                path: { "${params.outdir}/02_preprocessing/reference_selection" },
                mode: params.publish_dir_mode,
                pattern: "reference_selection_report.json",
                enabled: params.enable_reference_selection
            ]
        ]
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 1.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    // Stage 3: Graph construction modules
    withName: 'PGGB_CONSTRUCT' {
        container = 'pangenome/pggb:latest'
        publishDir = [
            [
                path: { "${params.outdir}/03_graph_construction/main_outputs" },
                mode: params.publish_dir_mode,
                pattern: "*.{gfa,og,png}"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/pggb_outputs" },
                mode: params.publish_dir_mode,
                pattern: "pggb_output/*"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.{log,txt}"
            ]
        ]
        // Resource allocation optimized for sheep pangenome (3GB genomes, 10-50+ samples)
        cpus          = { Math.min( 32 * task.attempt, params.max_cpus as int ) }
        memory        = { task.attempt < 2 ? 200.GB : params.max_memory }
        time          = { 24.h * task.attempt }
        // Error handling and retry strategy
        errorStrategy = 'retry'
        maxRetries    = 1
        // Module-specific parameters for sheep pangenomes
        ext.args = [
            '--poa-length-target 1000,1500,2000',
            '--align-poa',
            '--consensus',
            '--multiqc'
        ].join(' ')
        ext.prefix = { "sheep_pangenome" }
        // SLURM-specific optimizations
        clusterOptions = { task.attempt == 1 ? '--partition=batch --mem=256G' : '--partition=batch --mem=300G' }
    }

    withName: 'GRAPH_VALIDATE' {
        container = 'pangenome/odgi:latest'
        publishDir = [
            [
                path: { "${params.outdir}/03_graph_construction/validation" },
                mode: params.publish_dir_mode,
                pattern: "*_validation_report.html"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/validation" },
                mode: params.publish_dir_mode,
                pattern: "*_validation.{json,log}"
            ]
        ]
        // Moderate resources for validation
        cpus          = { 4 * task.attempt }
        memory        = { 32.GB * task.attempt }
        time          = { 2.h * task.attempt }
        errorStrategy = 'retry'
        maxRetries    = 1
    }

    withName: 'GRAPH_STATS' {
        container = 'pangenome/odgi:latest'
        publishDir = [
            [
                path: { "${params.outdir}/03_graph_construction/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_graph_report.html"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_graph_stats.json"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/statistics/detailed" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"
            ]
        ]
        // Moderate resources for statistics
        cpus          = { 8 * task.attempt }
        memory        = { 64.GB * task.attempt }
        time          = { 4.h * task.attempt }
        errorStrategy = 'retry'
        maxRetries    = 1
    }

    // Future stages (4-7) will be configured when implemented
}