/*
 * Module-specific configuration options
 */

process {
    // Global process configuration
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'DOWNLOAD_GENOME' {
        ext.args = '--include genome --no-progressbar'
        publishDir = [
            [
                path: { "${params.outdir}/01_data_preparation/downloaded_genomes" },
                mode: params.publish_dir_mode,
                pattern: "*.fa"
            ],
            [
                path: { "${params.outdir}/01_data_preparation/metadata" },
                mode: params.publish_dir_mode,
                pattern: "*.json"
            ],
            [
                path: { "${params.outdir}/01_data_preparation/logs" },
                mode: params.publish_dir_mode,
                pattern: "download_log.txt"
            ]
        ]
        // Resource requirements
        cpus   = { 2 }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
        // Error handling
        maxRetries = 3
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
        // Rate limiting to avoid NCBI 429 errors
        maxForks = params.download_max_forks
    }

    withName: 'VALIDATE_GENOME' {
        publishDir = [
            [
                path: { "${params.outdir}/01_data_preparation/validation" },
                mode: params.publish_dir_mode,
                pattern: "*_validation.json"
            ],
            [
                path: { "${params.outdir}/01_data_preparation/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_stats.txt"
            ]
        ]
        // Resource requirements
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 1.h * task.attempt }
        // Error handling
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    // Stage 2: Preprocessing modules
    withName: 'STANDARDIZE_GENOME' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/standardized_genomes" },
                mode: params.publish_dir_mode,
                pattern: "*_standardized.fa"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/chromosome_mapping" },
                mode: params.publish_dir_mode,
                pattern: "*_mapping.tsv"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "*_standardization_log.txt"
            ]
        ]
        cpus   = { 2 }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'GENOME_QC_EXTENDED' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/quality_control" },
                mode: params.publish_dir_mode,
                pattern: "*_report.html"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/quality_control" },
                mode: params.publish_dir_mode,
                pattern: "*_stats.json"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "*_qc_log.txt"
            ]
        ]
        cpus   = { 2 }
        memory = { 8.GB * task.attempt }
        time   = { 3.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'BWA_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/bwa_index" },
                mode: params.publish_dir_mode,
                pattern: "*.{amb,ann,bwt,pac,sa}"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "bwa_index_log.txt"
            ]
        ]
        cpus   = { 2 }
        memory = { 16.GB * task.attempt }
        time   = { 4.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'MINIMAP2_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/minimap2_index" },
                mode: params.publish_dir_mode,
                pattern: "*.mmi"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "minimap2_index_log.txt"
            ]
        ]
        cpus   = { 4 }
        memory = { 32.GB * task.attempt }
        time   = { 6.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            [
                path: { "${params.outdir}/02_preprocessing/samtools_index" },
                mode: params.publish_dir_mode,
                pattern: "*.fai"
            ],
            [
                path: { "${params.outdir}/02_preprocessing/logs" },
                mode: params.publish_dir_mode,
                pattern: "samtools_index_log.txt"
            ]
        ]
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 1.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName: 'SELECT_REFERENCE' {
        publishDir = [
            path: { "${params.outdir}/02_preprocessing/reference_selection" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 1 }
        memory = { 8.GB * task.attempt }
        time   = { 2.h * task.attempt }
        maxRetries = 2
        errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    }

    // Stage 3: Graph construction modules
    withName: 'PGGB_CONSTRUCT' {
        container = 'pangenome/pggb:latest'
        publishDir = [
            [
                path: { "${params.outdir}/03_graph_construction/main_outputs" },
                mode: params.publish_dir_mode,
                pattern: "*.{gfa,og,png}"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/pggb_outputs" },
                mode: params.publish_dir_mode,
                pattern: "pggb_output/*"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.{log,txt}"
            ]
        ]
        // Resource allocation optimized for sheep pangenome
        cpus          = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 128.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 12.h   * task.attempt, 'time'    ) }
        // Error handling and retry strategy
        errorStrategy = 'retry'
        maxRetries    = 2
        // Module-specific parameters
        ext.args = [
            '--threads ${task.cpus}',
            '--poa-length-target 700,900,1100',
            '--align-poa',
            '--no-splits',
            '--multiqc'
        ].join(' ')
        ext.prefix = { "sheep_pangenome" }
    }

    withName: 'GRAPH_VALIDATE' {
        container = 'pangenome/odgi:latest'
        publishDir = [
            [
                path: { "${params.outdir}/03_graph_construction/validation" },
                mode: params.publish_dir_mode,
                pattern: "*_validation_report.html"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/validation" },
                mode: params.publish_dir_mode,
                pattern: "*_validation.{json,log}"
            ]
        ]
        // Moderate resources for validation
        cpus          = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 2.h   * task.attempt, 'time'    ) }
        errorStrategy = 'retry'
        maxRetries    = 1
    }

    withName: 'GRAPH_STATS' {
        container = 'pangenome/odgi:latest'
        publishDir = [
            [
                path: { "${params.outdir}/03_graph_construction/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_graph_report.html"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/statistics" },
                mode: params.publish_dir_mode,
                pattern: "*_graph_stats.json"
            ],
            [
                path: { "${params.outdir}/03_graph_construction/statistics/detailed" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"
            ]
        ]
        // Moderate resources for statistics
        cpus          = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
        errorStrategy = 'retry'
        maxRetries    = 1
    }

    // Stage 4: Graph analysis modules (to be implemented)
    withName: 'ODGI_STATS' {
        publishDir = [
            path: { "${params.outdir}/04_graph_analysis/statistics" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 8 }
        memory = { 32.GB * task.attempt }
        time   = { 12.h * task.attempt }
    }

    withName: 'ODGI_VIZ' {
        publishDir = [
            path: { "${params.outdir}/04_graph_analysis/visualizations" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 4 }
        memory = { 16.GB * task.attempt }
        time   = { 6.h * task.attempt }
    }

    // Stage 5: Variant calling modules (to be implemented)
    withName: 'VG_CALL' {
        publishDir = [
            path: { "${params.outdir}/05_variant_calling/raw_variants" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 8 }
        memory = { 64.GB * task.attempt }
        time   = { 24.h * task.attempt }
    }

    withName: 'VG_FILTER' {
        publishDir = [
            path: { "${params.outdir}/05_variant_calling/filtered_variants" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 4 }
        memory = { 16.GB * task.attempt }
        time   = { 8.h * task.attempt }
    }

    // Stage 6: Population analysis modules (to be implemented)
    withName: 'ADMIXTURE' {
        publishDir = [
            path: { "${params.outdir}/06_population_analysis/structure" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 8 }
        memory = { 32.GB * task.attempt }
        time   = { 24.h * task.attempt }
    }

    withName: 'IQTREE' {
        publishDir = [
            path: { "${params.outdir}/06_population_analysis/phylogeny" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 16 }
        memory = { 64.GB * task.attempt }
        time   = { 48.h * task.attempt }
    }

    // Stage 7: Publication modules (to be implemented)
    withName: 'GENERATE_FIGURES' {
        publishDir = [
            path: { "${params.outdir}/07_publication/figures" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 4 }
        memory = { 8.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }

    withName: 'GENERATE_MANUSCRIPT' {
        publishDir = [
            path: { "${params.outdir}/07_publication/manuscript" },
            mode: params.publish_dir_mode
        ]
        cpus   = { 2 }
        memory = { 4.GB * task.attempt }
        time   = { 2.h * task.attempt }
    }
}