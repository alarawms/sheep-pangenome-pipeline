/*
========================================================================================
    Sheep Pangenome Pipeline Configuration
    Stages 1-3: Data Acquisition, Genome Preprocessing & Graph Construction
========================================================================================
*/

// Pipeline metadata
manifest {
    name            = 'sheep-pangenome'
    author          = 'Developed with Claude Code'
    homePage        = 'https://github.com/yourusername/sheep-pangenome'
    description     = 'Comprehensive sheep pangenome analysis with staged validation'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.0'
    version         = '1.2.0-stage3'
}

// Global default params, used in configs
params {
    // Input options
    input                       = null

    // Pipeline stage control
    stage                       = 1

    // Output options
    outdir                      = './results'
    publish_dir_mode            = 'copy'

    // Stage 1 specific parameters
    max_download_time           = '30.m'
    download_retries            = 3
    ncbi_api_key                = null
    download_max_forks          = 1
    validation_strict           = true

    // Genome validation criteria (sheep-specific)
    genome_size_min             = 2.4e9    // 2.4 Gb minimum
    genome_size_max             = 3.2e9    // 3.2 Gb maximum
    gc_content_min              = 35.0     // 35% minimum GC
    gc_content_max              = 50.0     // 50% maximum GC
    n_content_max               = 5.0      // 5% maximum N content
    max_contigs                 = 50000    // Maximum number of contigs

    // Stage 2 specific parameters
    standardization_timeout     = '2.h'
    qc_generate_plots           = true
    qc_tier_threshold           = 70       // Minimum quality score for A/B tiers
    indexing_timeout            = '6.h'
    reference_selection_criteria = 'comprehensive'  // or 'fast'

    // Stage 3 specific parameters (PGGB Graph Construction)
    pggb_segment_length         = 5000     // Initial segment length for PGGB
    pggb_block_length           = 3000     // Minimum block length for PGGB
    pggb_identity_threshold     = 90       // Sequence identity threshold (%)
    pggb_timeout                = '12.h'   // PGGB construction timeout
    graph_validation_enabled    = true     // Enable graph validation
    graph_stats_enabled         = true     // Enable detailed graph statistics

    // PGGB advanced parameters
    seqwish_threads            = 8         // seqwish threading
    smoothxg_max_block         = 1000      // smoothxg block size
    odgi_viz_width             = 1920      // Visualization width
    min_graph_coverage         = 2         // Minimum path coverage
    max_graph_complexity       = 10000     // Maximum complexity threshold

    // Resource limits (KAUST Ibex optimized)
    max_memory                  = '370.GB'  // Ibex node memory limit
    max_cpus                    = 32        // Conservative CPU limit
    max_time                    = '336.h'   // 14 days max on Ibex

    // Boilerplate options
    help                        = false
    validate_params             = false  // Temporarily disabled for Stage 2 parameters
    version                     = false

    // Schema validation
    validationShowHiddenParams  = false
    validationSkipDuplicateCheck = false
    validationS3PathCheck       = false
}

// Load base configuration
includeConfig 'conf/base.config'

// Load module-specific configuration
includeConfig 'conf/modules.config'

// Load Stage 3 specific configuration
includeConfig 'conf/modules_stage3.config'

// Profiles
profiles {
    debug {
        process.beforeScript       = 'echo $HOSTNAME'
        cleanup                    = false
    }

    conda {
        conda.enabled              = true
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
        apptainer.enabled          = false
    }

    mamba {
        conda.enabled              = true
        conda.useMamba             = true
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
        apptainer.enabled          = false
    }

    docker {
        docker.enabled             = true
        conda.enabled              = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
        apptainer.enabled          = false
    }

    arm {
        docker.runOptions          = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    singularity {
        singularity.enabled        = true
        singularity.autoMounts     = true
        conda.enabled              = false
        docker.enabled             = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
        apptainer.enabled          = false
    }

    podman {
        podman.enabled             = true
        conda.enabled              = false
        docker.enabled             = false
        singularity.enabled        = false
        shifter.enabled            = false
        charliecloud.enabled       = false
        apptainer.enabled          = false
    }

    shifter {
        shifter.enabled            = true
        conda.enabled              = false
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        charliecloud.enabled       = false
        apptainer.enabled          = false
    }

    charliecloud {
        charliecloud.enabled       = true
        conda.enabled              = false
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        apptainer.enabled          = false
    }

    apptainer {
        apptainer.enabled          = true
        conda.enabled              = false
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
    }

    test {
        includeConfig 'conf/test.config'
    }

    slurm {
        includeConfig 'conf/slurm.config'
    }
}

// Nextflow plugins
plugins {
    id 'nf-validation'
}

// Export variables to cluster jobs
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}